Question 1: Implement a C++ function named reverseString that takes a C-style string as a parameter and performs the following tasks:
1)    Determine the length of the input string without using any standard library functions.
2)    Create a new dynamically allocated character array to store the reverse of the input string.
3)    Reverse the characters of the input string and store the result in the dynamically allocated array.
4)   Print both the original and reversed strings.
Use the function in the main program with an example string like "practice" and print the results.

SOLUTION 1: 
void reverseString(char ptr[])
{
	cout << "Your input string is " << ptr << endl;
	cout << "The length of the string is ";
	int length = 0;
	while(ptr[length] != '\0'){
		length++;
	}
	cout << length << endl;
	
	char reverse[length +1];
	for(int len=0; len<length; len++ )
	{
		int index = length-1-len;
		reverse[len] = ptr[index];
	}
	cout << "the original string is " << ptr << endl;
	cout << "The reverse string is " << reverse << endl;
}
int main(){
	char arry[] = { 'P', 'R', 'A', 'C', 'T', 'I', 'C', 'E', '\0'};
	reverseString(arry);
	return 0;
}



Question 2: Implement a C++ function named memoryAddresses that takes two variables of different data types as parameters and performs the following tasks:
1)    Determine and print the memory address of the first variable without using any standard library functions.
2)    Determine and print the memory address of the second variable without using any standard library functions.
3)    Use the function in the main program with example variables and print the results.

SOLUTION 2:
#include "iostream"
using namespace std;

// The const keyword in C++ is used to indicate that a particular variable or object is constant, 
// meaning its value cannot be modified after initialization. 
// It is a type qualifier that can be applied to variables, pointers, references, member functions, and more.

void memoryAddress(const int& x, const char& y)
{
	cout << "The memory address of 1st variable " << &x << endl;
  	cout << "The memory address of 2st variable " <<static_cast<const void*>(&y) << endl;

// If you omit static_cast<const void*>, you might see a compilation error or unexpected behavior 
// because the << operator might interpret the char* as a C-style string and try to print characters until it finds a null terminator. 
// This is not what you want when printing memory addresses.	
	
}

main()
{
	int i = 10;
	char k = 'H';
	memoryAddress(i, k);
}



QUESTION 3: Implement a C++ function named dynamicMemoryAllocation that takes a variable of any data type as a parameter and performs the following tasks:\
1)    Dynamically allocate memory for the variable.
2)    Assign a value to the dynamically allocated variable.
3)    Print the value and memory address of the dynamically allocated variable.
4)    Deallocate the dynamically allocated memory.
Use the function in the main program with an example variable and print the results.

SOLUTION 3 :

#include "iostream"
#include "typeinfo"
using namespace std;

template <typename P>
void dynamicMemoryAllocat(P value)
{
	P *ptr = new P;  // intialize null pointer & then memory is requested to the variable 
	*ptr = value;    // dynamically assign value to dynamic variable 
	cout << "The value you enter is " << *ptr << endl;
	if(typeid(value) == typeid(char)) 
	{
		cout << "The memory address of value " << static_cast<const void*>(ptr) << endl; 
	}
	else
	{
		cout << "The memory address of value " << ptr << endl;
	}
	delete ptr;
}

main(){
	string variable = "Hello";   // you can initialize any data type here
	dynamicMemoryAllocat( variable );
}



QUESTION 4: Implement a C++ function named swapVariables that takes two integer pointers as parameters and performs the following tasks:
1)    Swap the values of the variables pointed to by the given pointers.
2)    Print the values of the variables after the swap.
Use the function in the main program with example variables and print the results.

SOLUTION 4:

#include <iostream>
using namespace std;

void swapVariable(int *p, int *q)
{
  int temp;
  temp = *p;
  *p = *q;
  *q = temp;
}
int main()
{
  int x=10;
  int y=15;
  swapVariable(&x, &y);
  cout << "The value of x after swapping is " << x << endl;
  cout << "The value of y after swapping is " << y << endl;
}



QUESTION 5:
Implement a C++ function named arrayOperations that takes an integer array and its size as parameters and performs the following tasks:
1)    Find and print the sum of all elements in the array.
2)    Calculate and print the average of the elements in the array.
3)    Find the maximum and minimum values in the array and print them.
Use the function in the main program with an example array and print the results.

SOLUTION 5:

#include <iostream>
using namespace std;

void arrayOperation(const int array[], const int n)
{
  int sum=0;
  for(int i=0; i<n; i++)
  {
     sum += array[i];
  }
  cout << "The sum of the array " << sum << end;
}

int main() 
{
  int arry[] = {1, 2, 3, 4, 5};
  int size = sizeof(arry)/sizeof(arry[0]);
  arrayOperation(arry, size);
}



QUESTION 6;
Implement a C++ program that explores the concept of data structures using the following tasks:
1)    Define a structure named Student with attributes name (string) and age (integer).
2)    Create an array of Student structures and populate it with information for at least three students.
3)    Print the details of each student from the array.

SOLUTION 6;
#include <iostream>
using namespace std;

struct Student {
    string name;
    int age;
};
int main() {
    Student students[3];
    students[0] = {"Harsh", 20};
    students[1] = {"Manan", 20};
    students[2] = {"Sourabh", 20};
    
    for(int i=0; i<3; i++){
        cout << "Name of the student is " << students[i].name << " and age is " << students[i].age  << endl;
    }
    return 0;
}


QUESTION 7;
 Implement a C++ program that explores the manipulation of arrays using pointers with the following tasks:
1)    Declare an integer array named numbers with a size of 5.
2)    Populate the array with consecutive integers starting from 1 using pointer arithmetic.
3)    Print the elements and their memory addresses in the array.
4)    Double the value of each element using pointers and print the updated array.


SOLUTION 7;
#include <iostream>
using namespace std;

int main() {
    int numbers[5];         // intializing array of size 5
    int* p = numbers;         // initializing a pointer
    for(int i=1; i<=5; i++){
        *p = i;
        p++;
    }

    //Printing the elements and their memory value

    p = numbers;            //reseting pointer from last to first 
    for(int n=0; n<5; n++){
    cout << "The value of " << n+1 << " element is " << *(p+n) << " And the memory address of the element is " << p+n << endl;
    }

    //Updating and printing the array elements

    p = numbers;
    cout << " " << endl;
    for(int k=1; k<=5; k++){
        cout << "The element " << k << " after updated is " << *p * 2 << endl;
        p++;
    }
}
    

QUESTION 8;
 Implement a C++ program that explores dynamic memory allocation for an integer array with the following tasks:
1)    Dynamically allocate memory for an integer array of size 3.
2)    Populate the array with consecutive integers starting from 5 using pointer arithmetic.
3)    Print the elements and their memory addresses in the dynamically allocated array.
4)    Deallocate the dynamically allocated memory.


SOLUTION 8;

#include <iostream>
using namespace std;

int main(){
    int* DynamicAllocArray = new int[3];
    int* p = DynamicAllocArray;
    
    for(int i=5; i<=7; i++){
        *p = i;
        p++;
    }
    
    p = DynamicAllocArray;
    for(int n=0; n<3; n++){
      cout << "The value of element " << n+1 << " is " << *p << " and its memory address is " << p << endl;
      p++;
    }
    delete[] DynamicAllocArray;
}


QUESTION 9;
Implement a C++ program that explores dynamic memory allocation for a string array with the following tasks:
1)    Dynamically allocate memory for a string array of size 4.
2)    Populate the array with names ("Alice", "Bob", "Charlie", "David") using pointer arithmetic.
3)    Print the names and their memory addresses in the dynamically allocated array.
4)    Deallocate the dynamically allocated memory.


SOLUTIONS 9;

#include <iostream>
using namespace std;

int main(){
    string* dynamicNames = new string[4];
    
    *dynamicNames = "Alice";
    *(dynamicNames+1) = "Bob";
    *(dynamicNames+2) = "charlie";
    *(dynamicNames+3) = "David";
    
    //ptr = dynamicNames;
    for(int i=0; i<=3; i++){
        cout << "The value of " << i+1 << " element is " << *dynamicNames << " and the memory address is " << dynamicNames << endl;
        dynamicNames++;
    }
    delete[] dynamicNames;

QUESTION 10;
Implement a C++ program that dynamically allocates memory for an array of four Point structures. The Point structure has two integer fields: x and y. 
Using pointer arithmetic,  populate the array with Point structures such that the x-coordinate follows an arithmetic progression starting from 5, 
and the y-coordinate follows a geometric progression starting from 2 (common ratio = 3). Finally, print the coordinates of each Point in the array.

SOLUTION 10;

#include <iostream>
using namespace std;

int main(){
    struct Point{
      int x;
      int y;
    };
    Point* dynamicArray = new Point[4];
    int apValue = 5;
    int gpValue = 2;
    
    for(int i=0; i < 4; i++) {
        *(dynamicArray+i) = {apValue + i, gpValue * (3<<i)};
    }

    for(int j=0; j<4; j++){
        cout << "The coordinate of point " << j+1 << " is : " << "x = " << dynamicArray[j].x << ", y = " <<   dynamicArray[j].y << endl; 
    }
}


QUESTION 11;
Implement a C++ program that utilizes the concept of memory addresses and references with the following tasks:
1) Declare an integer variable number with an initial value of 7.
2) Create a reference variable refNumber that references the memory address of number.
3) Print the memory address of number using & and the value of refNumber.
4) Update the value of number to 15 and observe the change in refNumber.

SOLUTION 11;


#include <iostream>
using namespace std;

int main() {
    int number=7;
    int& refNumber = number;
    
    cout << "The memory address of original vriable " << &number << endl;
    cout << "The Value of reference variable " << refNumber << endl;
    
    number = 15;
    cout << "The value of reference variable after updating original is " << refNumber << endl; 
}

